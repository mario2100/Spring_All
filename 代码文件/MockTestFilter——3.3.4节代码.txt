Activate(group = Constants.CONSUMER, order = -10000)
public class MockTestFilter implements Filter {
    private final static Logger log = LoggerFactory.getLogger(MockTestFilter. class);

    private static HttpConnectionPoolManage connectionPoolManage = new HttpConnectionPoolManage();
    private static OkHttpClient okHttpClient = new OkHttpClient();
    
    private final static String FACADE_PATH = "facadePath";
    private final static String APP_CODE = "appCode";
    private final static String METHOD_NAME = "methodName";
    private final static String IP = "ip";

    @Override
    public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {

        //判断Mock环境
        Result result = invokeMockEnv(invoker, inv);
        return result;
    }


   /**
     * 检查是否是Mock测试环境
     * 如果是测试环境则拦截Mock，如果不是则放行，执行正式逻辑
     *
     * @param invoker
     * @param inv
     * @return
     */
    private Result invokeMockEnv(Invoker<?> invoker, Invocation inv) {
        long start = System.currentTimeMillis();
        
        String env = inv.getInvoker().getUrl().getParameter("env");
        String mockUrl = inv.getInvoker().getUrl().getParameter("mockurl");
        String facadeName = inv.getInvoker().getInterface().getName();
        String applicationName = invoker.getUrl().getParameter("application");
        String methodName = inv.getMethodName();

        Result result = null;

        if (StringUtils.isEmpty(env)) {
            return invoker.invoke(inv);

        } else if (StringUtils.isNotEmpty(env) && env.equalsIgnoreCase("test")
                && StringUtils.isNotEmpty(mockUrl)) {

            //获取Mock数据
            String mockData = getMockSystemData(mockUrl, facadeName, applicationName, methodName);

            //如果得到的Mock数据为空，则放行，不进行Mock操作
            if (StringUtils.isEmpty(mockData)) {
                return invoker.invoke(inv);
            }

            //解析Mock数据
            MockTestConfig mockTestConfig = parseMockData(mockData, MockTestConfig.class);

            //执行Mock处理时间
            exeMockDelayTime(mockTestConfig);

            //模拟异常抛出
            exeMockExceptionThrow(mockTestConfig);


            if (null != mockTestConfig) {
                result = parseAndReflectResponse(mockTestConfig);
            } else {
                log.warn("解析Mock JSON串到对象为空 json:" + mockData);
            }
        } else {
            log.warn("Dubbo环境配置有问题，请检查application的env设置！env:" + env);
        }
        
        return result;
    }


    /**
     * 执行Mock处理时间
     *
     * @param mockTestConfig
     */
    private void exeMockDelayTime(MockTestConfig mockTestConfig) {
        String delayTimeStr = mockTestConfig.getDelayTime();
        if (StringUtils.isNotEmpty(delayTimeStr)) {
            Integer delayTime = Integer.parseInt(delayTimeStr);
            if (delayTime > 0) {
                try {
                    Thread.currentThread().sleep(delayTime);
                } catch (InterruptedException e) {
                    log.info( "Mock系统执行打转时间出错! mock参数是:" + MockTestConfig, e);
                    
                }
            }
        }
    }

    /**
     * 模拟异常抛出
     */
    private void exeMockExceptionThrow(MockTestConfig mockTestConfig) {
        String exceptionPath = mockTestConfig.getExceptionClass();
        String exceptionMsg = mockTestConfig.getExceptionJson();

        if (StringUtils.isNotEmpty(exceptionPath)) {
            try {
                if (StringUtils.isEmpty(exceptionMsg)) {
                    exceptionMsg = "Mock模拟Exception抛出 exceptionPath:" + exceptionPath;
                }
                Class exceptionClass = Class.forName(exceptionPath);
                Exception exceptionObj = (Exception) exceptionClass.newInstance();
                throw exceptionObj;
            } catch (ClassNotFoundException cnfe) {
                log.error( "异常类全路径没有找到 exceptionPath:" + exceptionPath);

            } catch (Exception e) {
                RpcException rpcException = new RpcException(exceptionMsg, e);
                rpcException.setStackTrace(e.getStackTrace());
                throw rpcException;
            }
        }
    }

   /**
     * 根据Mock系统传进来的JSON进行解析，与MockTestConfig进行映射
     *
     * @param mockData
     * @return
     */
    public <T> T parseMockData(String mockData, Class<T> mockCls) throws RpcException {
        T object = null;
        try {
            object = JSON.parse(mockData, mockCls);
        } catch (ParseException e) {
            String errorMessage = "mockData json串解析出错! json:" + mockData;
            log.error( errorMessage);
            throw new RpcException(errorMessage, e.getCause());
        }
        return object;

    }

    /**
     * 解析请求响应类
     * 对从Mock系统中得到相关的响应类进行解析，并根据Mock系统中设置的值进行注入
     *
     * @return
     */
    private Result parseAndReflectResponse(MockTestConfig mockTestConfig) {
        RpcResult result = new RpcResult();
        try {
            String responsePath = mockTestConfig.getResponsePath();
            if (StringUtils.isEmpty(responsePath)) {
                throw new RpcException("服务接口类全路径名称(facadeClass)为null");
            }

            Class responseClass = Class.forName(responsePath);
            Object responseBean = responseClass.newInstance();
            String responseJson = mockTestConfig.getResponseJson();
            responseBean = parseMockData(responseJson, responseBean.getClass());

            if (responseBean == null) {
                log.error( "响应JSON串映射成javaBean,ResponseBean为空! 
                     facadeClass:" + responsePath + " responseJson:" + responseJson);
                return result;
            }

            result.setValue(responseBean);

        } catch (Exception e) {
            log.error( e.toString(), e);
        }
        return result;
    }

    /**
     * 通过HTTP的方式发送Mock请求数据
     * 并得到请求结果
     *
     * @param mockUrl
     */
    private String getMockSystemData(String mockUrl, String facadeName, String applicationName, String methodName) {
        
        String result = null;
        
        //okhttp
        result = okhttpRequest(mockUrl, facadeName, applicationName, methodName);
        
        return result;
    }
    
    private String okhttpRequest(String mockUrl, String facadeName, String applicationName, String methodName) {

        String ip = NetUtils.getLocalAddress().getHostAddress();

        RequestBody body = new FormBody.Builder()
                .add(FACADE_PATH, facadeName)
                .add(APP_CODE, applicationName)
                .add(METHOD_NAME, methodName)
                .add(IP, ip)
                .build();

        Request request = new Request.Builder()
                .url(mockUrl)
                .post(body)
                .build();

        Call call = okHttpClient.newCall(request);
        try {
            Response response = call.execute();
            String responseBody = response.body().string();
            log.info(responseBody);
            return responseBody;
        } catch (Throwable e) {
            log.error( "Mock系统连续不通,请检查相关配置！mockUrl:" + mockUrl, e);
        }
        return null;
    }
}
