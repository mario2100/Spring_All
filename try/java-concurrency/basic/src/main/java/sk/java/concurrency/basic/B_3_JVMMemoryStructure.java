package sk.java.concurrency.basic;

/**
 * JVM
 * 内存结构
 */
public class B_3_JVMMemoryStructure {

    //方法区
    //线程共享区域
    //类加载信息 常量、静态变量、JIT编译后的字节码
    //jstat  gc内存分布

    //堆内存
    //所有线程共享
    //堆区划分：新生 老年

    //虚拟机栈：n*栈帧
    //栈帧：局部变量 操作栈 动态链接 方法出口
    //方法调用：压栈 弹栈
    //

    //本地方法栈
    //实现自由度高 由JVM厂商控制

    //程序计数器：存放当前线程接下来要执行的字节码指令、分支、循环、异常处理


    //编译型语言
    //静态 类型安全特性

    //////////////////////
    //执行引擎

    //本地接口库

    //不断创建线程 系统状态

    //堆内存xms 栈内存xss 与线程数量 反比关系


    //守护线程：用于处理后台操作 自动结束生命周期的能力
    //没一个非守护线程了 jvm退出

}
